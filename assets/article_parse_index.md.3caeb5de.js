import{_ as a,r as t,c as n,a as s,b as o,o as p}from"./app.91463472.js";const e='{"title":"JSON.parse","description":"一个NaN导致JSON.parse解析失败的故事","frontmatter":{"title":"JSON.parse","date":"2021-10-19T00:00:00.000Z","tags":["JSON.parse","bug"],"description":"一个NaN导致JSON.parse解析失败的故事"},"headers":[{"level":2,"title":"JSON.parse()","slug":"json-parse"},{"level":3,"title":"例子","slug":"例子"},{"level":2,"title":"缘由","slug":"缘由"},{"level":2,"title":"开始查找问题","slug":"开始查找问题"},{"level":3,"title":"1. 使用nodejs的http请求库request请求数据，查看结果返回的数据类型","slug":"_1-使用nodejs的http请求库request请求数据，查看结果返回的数据类型"},{"level":3,"title":"2. 确认是不是浏览器将字符串转换成json","slug":"_2-确认是不是浏览器将字符串转换成json"}],"relativePath":"article/parse/index.md","lastUpdated":1634614329284}',c={},u=o('<h1 id="nan导致json-parse解析失败" tabindex="-1" data-v-44123654>NaN导致JSON.parse解析失败 <a class="header-anchor" href="#nan导致json-parse解析失败" aria-hidden="true" data-v-44123654>#</a></h1><h2 id="json-parse" tabindex="-1" data-v-44123654>JSON.parse() <a class="header-anchor" href="#json-parse" aria-hidden="true" data-v-44123654>#</a></h2><div class="tip custom-block" data-v-44123654><p class="custom-block-title" data-v-44123654>官方定义</p><p data-v-44123654>JSON.parse() 方法用来解析JSON字符串，构造由字符串描述的JavaScript值或对象。提供可选的 reviver 函数用以在返回之前对所得到的对象执行变换(操作)。</p></div><h3 id="例子" tabindex="-1" data-v-44123654>例子 <a class="header-anchor" href="#例子" aria-hidden="true" data-v-44123654>#</a></h3><div class="language-js" data-v-44123654><pre data-v-44123654><code data-v-44123654><span class="token keyword" data-v-44123654>const</span> json <span class="token operator" data-v-44123654>=</span> <span class="token string" data-v-44123654>&#39;{&quot;result&quot;:true, &quot;count&quot;:42}&#39;</span><span class="token punctuation" data-v-44123654>;</span>\n<span class="token keyword" data-v-44123654>const</span> obj <span class="token operator" data-v-44123654>=</span> <span class="token constant" data-v-44123654>JSON</span><span class="token punctuation" data-v-44123654>.</span><span class="token function" data-v-44123654>parse</span><span class="token punctuation" data-v-44123654>(</span>json<span class="token punctuation" data-v-44123654>)</span><span class="token punctuation" data-v-44123654>;</span>\n\nconsole<span class="token punctuation" data-v-44123654>.</span><span class="token function" data-v-44123654>log</span><span class="token punctuation" data-v-44123654>(</span>obj<span class="token punctuation" data-v-44123654>.</span>count<span class="token punctuation" data-v-44123654>)</span><span class="token punctuation" data-v-44123654>;</span>\n<span class="token comment" data-v-44123654>// expected output: 42</span>\n\nconsole<span class="token punctuation" data-v-44123654>.</span><span class="token function" data-v-44123654>log</span><span class="token punctuation" data-v-44123654>(</span>obj<span class="token punctuation" data-v-44123654>.</span>result<span class="token punctuation" data-v-44123654>)</span><span class="token punctuation" data-v-44123654>;</span>\n<span class="token comment" data-v-44123654>// expected output: true</span>\n\n</code></pre></div><h2 id="缘由" tabindex="-1" data-v-44123654>缘由 <a class="header-anchor" href="#缘由" aria-hidden="true" data-v-44123654>#</a></h2><strong class="text-sm text-red-500" data-v-44123654> 公司和其它公司合作开发一个项目，我们出前端，B出后端，在对接一个列表接口的时候出现了兼容问题, 返回的数据有时候是string，有时候是object。 我们用的是axios请求接口，我猜测原因可能如下 </strong><ol data-v-44123654><li data-v-44123654>后端数据格式本来就有问题</li><li data-v-44123654>axios转化了数据</li><li data-v-44123654>浏览器转化了数据</li></ol><br data-v-44123654><h2 id="开始查找问题" tabindex="-1" data-v-44123654>开始查找问题 <a class="header-anchor" href="#开始查找问题" aria-hidden="true" data-v-44123654>#</a></h2><h3 id="_1-使用nodejs的http请求库request请求数据，查看结果返回的数据类型" tabindex="-1" data-v-44123654>1. 使用nodejs的http请求库request请求数据，查看结果返回的数据类型 <a class="header-anchor" href="#_1-使用nodejs的http请求库request请求数据，查看结果返回的数据类型" aria-hidden="true" data-v-44123654>#</a></h3><div class="tip custom-block" data-v-44123654><p class="custom-block-title" data-v-44123654>参数说明</p><p data-v-44123654>sample_id为空返回所以列表数据，sample_id有值则返回改样品的列表数据现在有两个样品id为PMD0000000何AD123456</p></div><div class="language-js" data-v-44123654><pre data-v-44123654><code data-v-44123654><span class="token keyword" data-v-44123654>const</span> request <span class="token operator" data-v-44123654>=</span> <span class="token function" data-v-44123654>require</span><span class="token punctuation" data-v-44123654>(</span><span class="token string" data-v-44123654>&#39;request&#39;</span><span class="token punctuation" data-v-44123654>)</span>\n<span class="token keyword" data-v-44123654>function</span> <span class="token function" data-v-44123654>getData</span><span class="token punctuation" data-v-44123654>(</span><span class="token punctuation" data-v-44123654>)</span><span class="token punctuation" data-v-44123654>{</span>\n    <span class="token keyword" data-v-44123654>return</span> <span class="token keyword" data-v-44123654>new</span> <span class="token class-name" data-v-44123654>Promise</span><span class="token punctuation" data-v-44123654>(</span><span class="token punctuation" data-v-44123654>(</span><span class="token parameter" data-v-44123654>resolve<span class="token punctuation" data-v-44123654>,</span> reject</span><span class="token punctuation" data-v-44123654>)</span><span class="token operator" data-v-44123654>=&gt;</span><span class="token punctuation" data-v-44123654>{</span>\n        <span class="token keyword" data-v-44123654>const</span> url <span class="token operator" data-v-44123654>=</span> <span class="token template-string" data-v-44123654><span class="token template-punctuation string" data-v-44123654>`</span><span class="token string" data-v-44123654>http://xxx/sample_table</span><span class="token template-punctuation string" data-v-44123654>`</span></span>\n        <span class="token function" data-v-44123654>request</span><span class="token punctuation" data-v-44123654>(</span><span class="token punctuation" data-v-44123654>{</span>\n            method<span class="token operator" data-v-44123654>:</span> <span class="token string" data-v-44123654>&#39;post&#39;</span><span class="token punctuation" data-v-44123654>,</span>\n            url<span class="token operator" data-v-44123654>:</span> url<span class="token punctuation" data-v-44123654>,</span>\n            headers<span class="token operator" data-v-44123654>:</span> <span class="token punctuation" data-v-44123654>{</span>\n              Authorization<span class="token operator" data-v-44123654>:</span> <span class="token string" data-v-44123654>&#39;xxx&#39;</span><span class="token punctuation" data-v-44123654>,</span>\n            <span class="token punctuation" data-v-44123654>}</span><span class="token punctuation" data-v-44123654>,</span>\n            formData<span class="token operator" data-v-44123654>:</span> <span class="token punctuation" data-v-44123654>{</span>\n              sample_status<span class="token operator" data-v-44123654>:</span> <span class="token string" data-v-44123654>&#39;&#39;</span><span class="token punctuation" data-v-44123654>,</span>\n              start_date<span class="token operator" data-v-44123654>:</span> <span class="token string" data-v-44123654>&#39;&#39;</span><span class="token punctuation" data-v-44123654>,</span>\n              end_date<span class="token operator" data-v-44123654>:</span> <span class="token string" data-v-44123654>&#39;&#39;</span><span class="token punctuation" data-v-44123654>,</span>\n              sample_id<span class="token operator" data-v-44123654>:</span> <span class="token string" data-v-44123654>&#39;&#39;</span> <span class="token comment" data-v-44123654>// 样品id</span>\n            <span class="token punctuation" data-v-44123654>}</span><span class="token punctuation" data-v-44123654>,</span>\n        <span class="token punctuation" data-v-44123654>}</span><span class="token punctuation" data-v-44123654>,</span> <span class="token punctuation" data-v-44123654>(</span><span class="token parameter" data-v-44123654>err<span class="token punctuation" data-v-44123654>,</span> response<span class="token punctuation" data-v-44123654>,</span> body</span><span class="token punctuation" data-v-44123654>)</span><span class="token operator" data-v-44123654>=&gt;</span><span class="token punctuation" data-v-44123654>{</span>\n          <span class="token comment" data-v-44123654>// 无论是sample_id等于PMD0000000，还是等于AD123456，输出结果都是string</span>\n          console<span class="token punctuation" data-v-44123654>.</span><span class="token function" data-v-44123654>log</span><span class="token punctuation" data-v-44123654>(</span><span class="token keyword" data-v-44123654>typeof</span> response<span class="token punctuation" data-v-44123654>.</span>body<span class="token punctuation" data-v-44123654>)</span>\n          console<span class="token punctuation" data-v-44123654>.</span><span class="token function" data-v-44123654>log</span><span class="token punctuation" data-v-44123654>(</span>response<span class="token punctuation" data-v-44123654>.</span>body<span class="token punctuation" data-v-44123654>)</span>\n        <span class="token punctuation" data-v-44123654>}</span><span class="token punctuation" data-v-44123654>)</span>\n    <span class="token punctuation" data-v-44123654>}</span><span class="token punctuation" data-v-44123654>)</span>\n<span class="token punctuation" data-v-44123654>}</span>\n\nsample_id <span class="token operator" data-v-44123654>=</span> <span class="token constant" data-v-44123654>PMD0000000</span>结果\n<span class="token template-string" data-v-44123654><span class="token template-punctuation string" data-v-44123654>`</span><span class="token string" data-v-44123654>{\n\t&quot;feedback&quot;: {\n\t\t&quot;table&quot;: [{\n\t\t\t&quot;age&quot;: 22,\n\t\t\t&quot;cg_date&quot;: &quot;Mon, 27 Sep 2021 10:38:14 GMT&quot;,\n\t\t\t&quot;finance_check&quot;: &quot;已通过&quot;,\n\t\t\t&quot;name&quot;: &quot;test222&quot;,\n\t\t\t&quot;salesman&quot;: &quot;测试者&quot;,\n\t\t\t&quot;sample_date&quot;: &quot;Thu, 02 Sep 2021 00:00:00 GMT&quot;,\n\t\t\t&quot;sample_id&quot;: &quot;PMD0000000&quot;,\n\t\t\t&quot;sex&quot;: &quot;女&quot;,\n\t\t\t&quot;sp_st&quot;: &quot;待接收&quot;\n\t\t}],\n\t\t&quot;total&quot;: 1\n\t},\n\t&quot;return&quot;: &quot;successes&quot;\n}</span><span class="token template-punctuation string" data-v-44123654>`</span></span>\n\nsample_id <span class="token operator" data-v-44123654>=</span> <span class="token constant" data-v-44123654>AD123456</span>结果\n<span class="token template-string" data-v-44123654><span class="token template-punctuation string" data-v-44123654>`</span><span class="token string" data-v-44123654>{\n  &quot;feedback&quot;: {\n    &quot;table&quot;: [\n      {\n        &quot;age&quot;: NaN, \n        &quot;cg_date&quot;: &quot;Thu, 02 Sep 2021 09:21:50 GMT&quot;, \n        &quot;finance_check&quot;: &quot;待复审&quot;, \n        &quot;name&quot;: NaN, \n        &quot;salesman&quot;: &quot;测试者&quot;, \n        &quot;sample_date&quot;: &quot;Thu, 02 Sep 2021 00:00:00 GMT&quot;, \n        &quot;sample_id&quot;: &quot;AD12345&quot;, \n        &quot;sex&quot;: NaN, \n        &quot;sp_st&quot;: &quot;&quot;\n      }\n    ], \n    &quot;total&quot;: 1\n  }, \n  &quot;return&quot;: &quot;successes&quot;\n}</span><span class="token template-punctuation string" data-v-44123654>`</span></span>\n\n</code></pre></div><p data-v-44123654>根据结果可以看到response.body永远都是string，这说明是axios或者是浏览器把string转换了json数据</p><h3 id="_2-确认是不是浏览器将字符串转换成json" tabindex="-1" data-v-44123654>2. 确认是不是浏览器将字符串转换成json <a class="header-anchor" href="#_2-确认是不是浏览器将字符串转换成json" aria-hidden="true" data-v-44123654>#</a></h3><ul data-v-44123654><li data-v-44123654> 打开浏览器开发者工具 </li><li data-v-44123654> 打开network，选中接口，点击Initiator查看axios是否进行了转化数据（或者直接去看源码），发现并没有相关的代码 </li><li data-v-44123654> 点击Prview面板，结果发现sample_id = PMD0000000接口返回的数据可以折叠，sample_id = AD12345接口返回的数据却无法折叠 </li></ul><strong class="text-sm text-red-500" data-v-44123654> 以上操作足以说明是浏览器转化了数据，但是为什么有的转化有的不转化呢？，带着疑问仔细观察了AD123456返回的数据，有几个字段的值是NaN，所以有可能是NaN导致解析失败 </strong><div class="language-js" data-v-44123654><pre data-v-44123654><code data-v-44123654><span class="token keyword" data-v-44123654>const</span> person <span class="token operator" data-v-44123654>=</span> <span class="token template-string" data-v-44123654><span class="token template-punctuation string" data-v-44123654>`</span><span class="token string" data-v-44123654>{&quot;name&quot;:NaN}</span><span class="token template-punctuation string" data-v-44123654>`</span></span>\n<span class="token constant" data-v-44123654>JSON</span><span class="token punctuation" data-v-44123654>.</span><span class="token function" data-v-44123654>parse</span><span class="token punctuation" data-v-44123654>(</span>person<span class="token punctuation" data-v-44123654>)</span>\n<span class="token comment" data-v-44123654>// 抛错如下</span>\nUncaught SyntaxError<span class="token operator" data-v-44123654>:</span> Unexpected token <span class="token constant" data-v-44123654>N</span> <span class="token keyword" data-v-44123654>in</span> <span class="token constant" data-v-44123654>JSON</span> at position <span class="token number" data-v-44123654>8</span>\n这说明它建<span class="token number" data-v-44123654>NaN</span>当字符串处理了\n\n</code></pre></div><div class="language-js" data-v-44123654><pre data-v-44123654><code data-v-44123654><span class="token keyword" data-v-44123654>const</span> person <span class="token operator" data-v-44123654>=</span> <span class="token template-string" data-v-44123654><span class="token template-punctuation string" data-v-44123654>`</span><span class="token string" data-v-44123654>{&quot;name&quot;:&quot;NaN&quot;}</span><span class="token template-punctuation string" data-v-44123654>`</span></span>\n<span class="token constant" data-v-44123654>JSON</span><span class="token punctuation" data-v-44123654>.</span><span class="token function" data-v-44123654>parse</span><span class="token punctuation" data-v-44123654>(</span>person<span class="token punctuation" data-v-44123654>)</span> <span class="token comment" data-v-44123654>// 解析成功</span>\n\n</code></pre></div><p data-v-44123654> 问题根源已经找到，就是根源已经定位成功，NaN导致JSON.parse解析失败，最后解决方法是让后端处理下NaN数据 </p>',20);var d=a(c,[["render",function(a,o,e,c,d,l){const v=t("comment");return p(),n("div",null,[u,s(v)])}],["__scopeId","data-v-44123654"]]);export{e as __pageData,d as default};
